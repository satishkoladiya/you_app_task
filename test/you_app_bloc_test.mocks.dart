// Mocks generated by Mockito 5.4.2 from annotations
// in you_app_test/test/you_app_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:you_app_task/core/api/auth/model/user.dart' as _i7;
import 'package:you_app_task/core/api/profile/model/profile_data.dart' as _i5;
import 'package:you_app_task/core/repository/i_auth_repository.dart' as _i6;
import 'package:you_app_task/core/repository/i_profile_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProfileRepository extends _i1.Mock
    implements _i3.IProfileRepository {
  MockIProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i5.ProfileData>> getProfile(
          String? access_token) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [access_token],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, _i5.ProfileData>>.value(
            _FakeEither_0<Exception, _i5.ProfileData>(
          this,
          Invocation.method(
            #getProfile,
            [access_token],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, _i5.ProfileData>>);

  @override
  _i4.Future<_i2.Either<Exception, String>> updateProfile(
    String? access_token,
    _i5.ProfileData? profileData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [
            access_token,
            profileData,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, String>>.value(
            _FakeEither_0<Exception, String>(
          this,
          Invocation.method(
            #updateProfile,
            [
              access_token,
              profileData,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, String>>);
}

/// A class which mocks [IProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i3.IProfileRepository {
  MockProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i5.ProfileData>> getProfile(
          String? access_token) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [access_token],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, _i5.ProfileData>>.value(
            _FakeEither_0<Exception, _i5.ProfileData>(
          this,
          Invocation.method(
            #getProfile,
            [access_token],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, _i5.ProfileData>>);

  @override
  _i4.Future<_i2.Either<Exception, String>> updateProfile(
    String? access_token,
    _i5.ProfileData? profileData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [
            access_token,
            profileData,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, String>>.value(
            _FakeEither_0<Exception, String>(
          this,
          Invocation.method(
            #updateProfile,
            [
              access_token,
              profileData,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, String>>);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i6.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, String>> register(_i7.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [user],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, String>>.value(
            _FakeEither_0<Exception, String>(
          this,
          Invocation.method(
            #register,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, String>>);

  @override
  _i4.Future<_i2.Either<Exception, Map<String, dynamic>>> login(
          _i7.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [user],
        ),
        returnValue:
            _i4.Future<_i2.Either<Exception, Map<String, dynamic>>>.value(
                _FakeEither_0<Exception, Map<String, dynamic>>(
          this,
          Invocation.method(
            #login,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, Map<String, dynamic>>>);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.IAuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, String>> register(_i7.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [user],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, String>>.value(
            _FakeEither_0<Exception, String>(
          this,
          Invocation.method(
            #register,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, String>>);

  @override
  _i4.Future<_i2.Either<Exception, Map<String, dynamic>>> login(
          _i7.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [user],
        ),
        returnValue:
            _i4.Future<_i2.Either<Exception, Map<String, dynamic>>>.value(
                _FakeEither_0<Exception, Map<String, dynamic>>(
          this,
          Invocation.method(
            #login,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, Map<String, dynamic>>>);
}
